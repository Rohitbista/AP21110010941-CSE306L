#include <stdio.h>
#include <conio.h>
#include <stdlib.h>
#include <string.h>

int i = 0, top = 0;
char stack[20], ip[20];

void push(char c) {
    if (top >= 20)
        printf("Stack Overflow");
    else
        stack[top++] = c;
}

void pop(void) {
    if (top < 0)
        printf("Stack underflow");
    else
        top--;
}

void error(void) {
    printf("\n\nSyntax Error!!!! String is invalid\n");
    getch();
    exit(0);
}

int main() {
    int n;

    printf("The given grammar is\n\n");
    printf("E -> TE'\n");
    printf("E' -> +TE' | epsilon\n");
    printf("T -> FT'\n");
    printf("T' -> *FT' | epsilon\n");
    printf("F -> (E) | d\n\n");

    printf("Enter the string to be parsed:\n");
    scanf("%s", ip);
    n = strlen(ip);
    ip[n] = '$';
    ip[n + 1] = '\0';
    push('$');
    push('E');
    
    while (ip[i] != '\0') {
        if (ip[i] == '$' && stack[top - 1] == '$') {
            printf("\n\n Successful parsing of string\n");
            return 1;
        } else if (ip[i] == stack[top - 1]) {
            printf("\nmatch of %c occurred ", ip[i]);
            i++;
            pop();
        } else {
            if (stack[top - 1] == 'E') {
                if (ip[i] == '(') {
                    printf("\nE -> TE'");
                    pop();
                    push('E');
                    push('\'');
                    push('T');
                } else if (ip[i] == 'd') {
                    printf("\nE -> TE'");
                    pop();
                    push('E');
                    push('\'');
                    push('T');
                } else {
                    error();
                }
            } else if (stack[top - 1] == 'E' && stack[top - 2] == '\'') {
                if (ip[i] == '+') {
                    printf("\nE' -> +TE'");
                    pop();
                    pop();
                    push('E');
                    push('\'');
                    push('T');
                } else if (ip[i] == ')' || ip[i] == '$') {
                    printf("\nE' -> epsilon");
                    pop();
                    pop();
                } else {
                    error();
                }
            } else if (stack[top - 1] == 'T') {
                if (ip[i] == '(') {
                    printf("\nT -> FT'");
                    pop();
                    push('T');
                    push('\'');
                    push('F');
                } else if (ip[i] == 'd') {
                    printf("\nT -> FT'");
                    pop();
                    push('T');
                    push('\'');
                    push('F');
                } else {
                    error();
                }
            } else if (stack[top - 1] == 'T' && stack[top - 2] == '\'') {
                if (ip[i] == '*') {
                    printf("\nT' -> *FT'");
                    pop();
                    pop();
                    push('T');
                    push('\'');
                    push('F');
                } else if (ip[i] == '+' || ip[i] == ')' || ip[i] == '$') {
                    printf("\nT' -> epsilon");
                    pop();
                    pop();
                } else {
                    error();
                }
            } else if (stack[top - 1] == 'F') {
                if (ip[i] == '(') {
                    printf("\nF -> (E)");
                    pop();
                    push(')');
                    push('E');
                    push('(');
                } else if (ip[i] == 'd') {
                    printf("\nF -> d");
                    pop();
                    push('d');
                } else {
                    error();
                }
            } else {
                error();
            }
        }
    }

    return 0;
}
